{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww18920\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 #####Generate ARG matrix####\
##ARG alignment using BWA\
bwa mem /scratch/lz967/megares_database/megares_database_v1.01.fasta -t 20  $\{p\}.clean.combined.fastuniq.r1.fastq  $\{p\}.clean.combined.fastuniq.r2.fastq > $\{p\}.ARG.aln-pe.uniq.sam\
\
###filter the alignments\
samtools view -bS $\{p\}.ARG.aln-pe.uniq.sam >  $\{p\}.ARG.aln-pe.uniq.bam\
samtools view -q 10 -b $\{p\}.ARG.aln-pe.uniq.bam > $\{p\}.ARG.aln-pe.uniq.q10.bam\
###convert to bed files \
bedtools bamtobed -i $\{p\}.ARG.aln-pe.uniq.q10.bam > $\{p\}.ARG.aln-pe.uniq.q10.bed\
###checking the mapping distance\
#check the coordinates that the reads align to the genes\
python ARG_mapping_check.py  $\{p\}.ARG.aln-pe.uniq.q10.bed   $\{p\}.ARG.uniq.q10.mapping_remove_duplicates.check  $\{p\}.ARG.uniq.q10_remove_duplicates.ref\
#filter the reads that the mapping distance need to be at least 400bp and 10 reads align per gene\
ARG_matrix_generation.Rmd\
\
###ARG reads align to the kraken database ####\
#use the filtered reads output from ARG_matrix_generation.Rmd and extract the fastq sequences\
extractARG.py  $\{p\}.filtered.reads. $\{p\}.interleave.fastq. $\{p\}.ARG_filtered_reads.fastq\
#convert fastq files to fasta files \
\
#run Kraken on the reads \
srun kraken --db /scratch/lz967/kraken_database  "$\{ARRAY[$SLURM_ARRAY_TASK_ID]\}".ARG_filtered_reads.fasta    --output "$\{ARRAY[$SLURM_ARRAY_TASK_ID]\}".ARG.kraken\
\
srun kraken-translate --mpa-format --db /scratch/lz967/kraken_database  "$\{ARRAY[$SLURM_ARRAY_TASK_ID]\}".ARG.kraken  > "$\{ARRAY[$SLURM_ARRAY_TASK_ID]\}".ARG.kraken.translate\
\
\
}